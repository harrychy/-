》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》

暴力字符串匹配
var b="ABAAAC";
var c="BAAA";
var N=b.length;
var M=c.length;
function a(b,c){
	for(var i=0;i<N-M;i++){
		var match=true;
		for(var j=0;j<M;j++){
			if(b[i+j]!==c[j]){
				match=false;
				break;}
		}
		if(match){
			console.log(j);
		}
	}
};
时间复杂度为O((N-M)*M)

》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》

在一个字符串(1<=字符串长度<=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置。
function FirstNotRepeatingChar(str)
{
    for(var i=0;i<str.length;i++){
        if(str.indexOf(str[i],i+1)===-1&&str.indexOf(str[i])===i){
            return i;
        }
    }
    return -1;	
}

//str.indexOf(str[i],i+1)===-1 判断元素后是否还有相同元素。如果有返回这个元素后第一次出现相同元素的位置。
//str.indexOf(str[i])===i 判断元素前是否有相同元素。如果有返回值为字符串第一次出现此元素的位置。

》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》

数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组
长度的一半，因此输出2。如果不存在则输出0。

function MoreThanHalfNum_Solution(numbers)
{
    // write code here
    var c=[],
        len = numbers.length,
        a;
    for(var i=0;i<len;i++){
        a=numbers[i];
        if(c[a]){
            c[a]++;
        }else{
            c[a]=1;
        }
    }
    for(var j=0;j<c.length;j++){
        if(c[j]>len/2){
            return j;
        }
    }
    return 0;
}

》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》

一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。
自己：
function FindNumsAppearOnce(array)
{
    // write code here
    // return list, 比如[a,b]，其中ab是出现一次的两个数字
    var a=[],c;
    for(var i=0;i<array.length;i++){
        c=array[i];
        if(a[c]){
            a[c]++;
        }else{a[c]=1;}
    }
    var b=[];
    for(var i=0;i<a.length;i++){
        if(a[i]==1){
            b.push(i);
        }
    }
    return b;
}//可用时间复杂度高。

优秀解法：
function FindNumsAppearOnce(array)
{
    // write code here
    // return list, 比如[a,b]，其中ab是出现一次的两个数字
    var arr = [];
    for(var i = 0; i < array.length; i++) {
        if(array.indexOf(array[i]) === array.lastIndexOf(array[i])) {
            arr.push(array[i]);
        }
    }
    return arr;
}
//array.indexOf(array[i])判断某一个数字的位置
//array.lastIndexOf(array[i])判断某一个数字的最后位置，如果两者相等，则证明数组中只有一个此数字。

》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》

牛牛有一个数组，里面的数可能不相等，现在他想把数组变为：所有的数都相等。问是否可行。
牛牛可以进行的操作是：将数组中的任意一个数改为这个数的两倍。
这个操作的使用次数不限，也可以不使用，并且可以对同一个位置使用多次。
假如经过若干次操作可以使得N个数都相等，那么输出"YES", 否则输出"NO"
function cut(array){
    var a=[],b
    
    for(var i=0;i<array.length;i++){
        if(array[i]%2==0){
            while(array[i]%2==0){
                array[i]=array[i]/2;
            }
        }
    }
     var result = [], hash = {};
      for (var i = 0, elem; (elem = array[i]) != null; i++) {
          if (!hash[elem]) {
              result.push(elem);
              hash[elem] = true;
          }
      }
    if(result.length==1){
        return "YES";
    }else{
        return "NO";
    }
}
