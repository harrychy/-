一、二叉树遍历
    递归遍历：
            var tree = {
              value: 1,
              left: {
                value: 2,
                left: {
                  value: 4
                }
              },
              right: {
                value: 3,
                left: {
                  value: 5,
                  left: {
                    value: 7
                  },
                  right: {
                    value: 8
                  }
                },
                right: {
                  value: 6
                }
              }
            } //一个树

            递归遍历
            觉得用这几个字母表示递归遍历的三种方法不错：
            D：访问根结点，L：遍历根结点的左子树，R：遍历根结点的右子树。
            先序遍历：DLR
            中序遍历：LDR
            后序遍历：LRD
            顺着字母表示的意思念下来就是遍历的顺序了 ^ ^
----------------------------------------------------------------------------------------------------------------------------------------
            先序遍历的递归算法：
            var preOrder = function (node) {
              if (node) {
                console.log(node.value);
                preOrder(node.left);
                preOrder(node.right);
              }
            }
----------------------------------------------------------------------------------------------------------------------------------------
            中序遍历的递归算法：
            var inOrder = function (node) {
              if (node) {
                inOrder(node.left);
                console.log(node.value);
                inOrder(node.right);
              }
            }
----------------------------------------------------------------------------------------------------------------------------------------
            后序遍历的递归算法：
            var postOrder = function (node) {
              if (node) {
                postOrder(node.left);
                postOrder(node.right);
                console.log(node.value);
              }
            }

》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》

    广度优先遍历
    广度优先遍历是从二叉树的第一层（根结点）开始，自上至下逐层遍历；在同一层中，按照从左到右的顺序对结点逐一访问。
    实现：

    使用数组模拟队列。首先将根节点归入队列。当队列不为空的时候，执行循环：取出队列的一个节点，如果该结点的左子树为非空，则将该结点的左子树入队列；如果该结点的右子树为非空，则将该结点的右子树入队列。
    （描述有点不清楚，直接看代码吧。）

    var levelOrderTraversal = function(node) {
      if(!node) {
        throw new Error('Empty Tree')
      }

      var que = []
      que.push(node)                                //将第一个根节点放入数组
      while(que.length !== 0) {
        node = que.shift()                          //取出第一个根节点（这个根节点包含他的所有子树）此时数组为空，shift()取出数据并从数组中删除
        console.log(node.value)                     //输出根节点的值
        if(node.left) que.push(node.left)           //如果左子树存在将左子树放入数组
        if(node.right) que.push(node.right)         //如果右子树存在将右子树放入数组
      }
    }
    取出左子树节点的值，并将左子树的左右子树放入数组，取出右子树的值，并将右子树的左右子树放入数组，不停递归，直到数组中没有节点。
    
 》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》
 
 AVL树 平衡树
        左单旋：左节点不动
        function roateLeft(AvlNode) {
            var node = AvlNode.right; // 保存右子节点
            AvlNode.right = node.left; // node的左子节点连接到AvlNode成为其右子节点
            node.left = AvlNode; // AvlNode连接到node成为其左子节点
            return node; // 返回node，连接到AvlNode最初的父节点
        }
        右单旋：右节点不动
        function roateRight(AvlNode) {
            var node = AvlNode.left; // 保存左子节点
            AvlNode.left = node.right; // 将node的右子节点连接到AvlNode成为其左子节点
            node.right = AvlNode; // AvlNode连接到node，成为其右子节点
            return node; // 返回node连接到AvlNode最初的父节点
        }
        左-右双旋：
        function roateLeftRight(AvlNode) {
            AvlNode.right = roateLeft(AvlNode.left); // 对左子节点做左单旋
            return roateRight(AvlNode); // 做右单旋
        }
        右-左双旋：
        function roateRightLeft(AvlNode) {
            AvlNode.left = roateRight(AvlNode.right); // 对右子节点做右单旋
            return roateLeft(AvlNode); // 做左单旋
        }
